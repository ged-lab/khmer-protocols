#!/usr/bin/env python
''' extract_shell.py

Extracts shell commands from ReStructuredText files in a backwards- and
Sphinx-compatible way. Intended to be useful for automated testing of shell
snippets embedded in human readable documents.

Requirements: the Sphinx documentation generator version 1.2+

Usage:
    1) Notate shell code that is to be both displayed and extracted with the
    "code-block" directive which has the highlight language specified as
    "bash".
    Example:
.. code-block:: bash

   cd mydirectory

   2) Notate shell code that is to be extracted only and not displayed with a
   ReST comment that begins with "code-block-hidden"
   Example:
.. code-block-hidden

   run mySecretSetupProgram.sh

   3) Use the Sphinx XMLBuilder to serialize your documentation to disk.
   Example: sphinx-build -b xml . build

   4) Use extract-shell.py to parse the XML files generated by the Sphinx
   XMLBuilder. Redirect the output as desired.
   Example: (ls build/mrnaseq/*.xml | xargs -n 1 ./extract_shell.py) > out.sh
'''

from __future__ import print_function
import xml.parsers.expat
import sys

IN_COMMENT_ELEMENT = False
HIDDEN_CODE_BLOCK_STARTED = False
IN_CODE_BLOCK = False


def start_element(name, attrs):
    ''' Detects if we've entered an XML element corresponding to either a
    "code-block" directive with it's highlight language set to "bash"
    or a potential "code-block-hidden" comment. '''

    global IN_COMMENT_ELEMENT
    global IN_CODE_BLOCK

    if (name == 'comment'):
        # print 'comment:', attrs
        IN_COMMENT_ELEMENT = True
    elif (name == 'literal_block' and attrs.get("language") == 'bash'):
        IN_CODE_BLOCK = True


def end_element(name):
    ''' Detects if we've left one of the elements we were tracking. '''

    global IN_COMMENT_ELEMENT
    global IN_CODE_BLOCK
    global HIDDEN_CODE_BLOCK_STARTED

    if (name == 'comment'):
        IN_COMMENT_ELEMENT = False
        if (HIDDEN_CODE_BLOCK_STARTED):
            print()
            HIDDEN_CODE_BLOCK_STARTED = False
    elif (name == 'literal_block'):
        if (IN_CODE_BLOCK):
            IN_CODE_BLOCK = False
            print()


def char_data(data):
    ''' Outputs the XML element data if appropriate.'''

    global HIDDEN_CODE_BLOCK_STARTED

    if (IN_CODE_BLOCK):
        print(data, end='')
    elif (IN_COMMENT_ELEMENT):
        if (HIDDEN_CODE_BLOCK_STARTED):
            print(data, end='')
        elif (data.startswith('code-block-hidden')):
            HIDDEN_CODE_BLOCK_STARTED = True


def main():
    ''' Sets up the parser and the handlers; parses the provided Docutils XML
    document.'''

    parser = xml.parsers.expat.ParserCreate()
    parser.StartElementHandler = start_element
    parser.EndElementHandler = end_element
    parser.CharacterDataHandler = char_data
    parser.ParseFile(file(sys.argv[1]))

if __name__ == '__main__':
    main()
